/* The following code was generated by JFlex 1.4.3 on 2/12/13 4:07 PM */

package generated;

import java_cup.runtime.*;
import generated.symbol.JavaSymbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/12/13 4:07 PM from the specification file
 * <tt>files/java.flex</tt>
 */
public class LexicalAnalyzer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\72"+
    "\1\24\1\0\1\6\1\102\1\76\1\25\1\57\1\60\1\5\1\100"+
    "\1\66\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\75"+
    "\1\65\1\71\1\67\1\70\1\74\1\0\3\14\1\103\1\22\1\20"+
    "\5\6\1\12\13\6\1\13\2\6\1\63\1\26\1\64\1\101\1\6"+
    "\1\0\1\27\1\30\1\34\1\46\1\37\1\50\1\53\1\43\1\44"+
    "\1\6\1\41\1\36\1\51\1\40\1\35\1\52\1\6\1\33\1\31"+
    "\1\32\1\45\1\54\1\55\1\47\1\42\1\56\1\61\1\77\1\62"+
    "\1\73\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6"+
    "\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7"+
    "\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7"+
    "\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6"+
    "\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6"+
    "\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0"+
    "\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7"+
    "\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6"+
    "\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7"+
    "\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0"+
    "\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0"+
    "\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0"+
    "\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6"+
    "\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0"+
    "\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0"+
    "\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7"+
    "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0"+
    "\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6"+
    "\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0"+
    "\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0"+
    "\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6"+
    "\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6"+
    "\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7"+
    "\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0"+
    "\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0"+
    "\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0"+
    "\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0"+
    "\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0"+
    "\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0"+
    "\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0"+
    "\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6"+
    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6"+
    "\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6"+
    "\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\17\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\40\1\41\2\1\2\42\1\1\1\2\1\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\3\45\1\50"+
    "\1\46\1\0\1\51\1\52\1\53\27\5\1\54\1\5"+
    "\1\55\12\5\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\2\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\12\74\1\0\1\107\2\110\2\45"+
    "\1\46\1\0\12\5\1\111\15\5\1\112\2\5\1\113"+
    "\4\5\1\114\10\5\1\115\1\116\1\117\1\75\1\0"+
    "\1\120\1\0\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\110\2\45\3\5\1\132\6\5"+
    "\1\133\2\5\1\134\1\5\1\135\3\5\1\136\1\137"+
    "\1\140\2\5\1\141\15\5\1\142\1\5\1\143\1\110"+
    "\2\45\1\5\1\144\3\5\1\145\1\146\2\5\1\147"+
    "\2\5\1\150\1\5\1\151\10\5\1\152\1\153\1\154"+
    "\4\5\1\155\1\110\2\45\2\5\1\156\1\5\1\157"+
    "\1\5\1\160\1\5\1\161\2\5\1\162\2\5\1\163"+
    "\1\5\1\164\5\5\1\165\1\110\2\45\1\5\1\166"+
    "\4\5\1\167\3\5\1\170\1\171\1\172\1\5\1\173"+
    "\1\110\2\45\1\174\3\5\1\175\4\5\1\110\2\45"+
    "\1\5\1\176\2\5\1\177\1\5\1\200\1\110\2\45"+
    "\1\5\1\201\1\202\1\203\1\0\2\45\1\5\1\0"+
    "\2\45\1\204\1\0\2\45\1\0\2\45\1\0\2\45"+
    "\1\0\2\45\1\0\1\45\1\46\1\0\5\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\314\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\314\0\314\0\u0330"+
    "\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\314\0\314\0\314\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\u0990\0\u09d4\0\314\0\314\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\314\0\u0ae4\0\u0b28\0\u0b6c\0\314\0\314\0\u0bb0"+
    "\0\u0bf4\0\314\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\314\0\u0d48"+
    "\0\u0d8c\0\314\0\314\0\314\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u01dc\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\314\0\314\0\u171c\0\314\0\u1760\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\u17a4"+
    "\0\u17e8\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\314\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u01dc\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u01dc\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u01dc\0\u24a8\0\u24ec\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\314\0\u26c8\0\314"+
    "\0\314\0\u1870\0\314\0\u270c\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\u2750\0\u2794\0\u27d8"+
    "\0\u281c\0\u2860\0\u28a4\0\u01dc\0\u28e8\0\u292c\0\u2970\0\u29b4"+
    "\0\u29f8\0\u2a3c\0\u01dc\0\u2a80\0\u2ac4\0\u01dc\0\u2b08\0\u01dc"+
    "\0\u2b4c\0\u2b90\0\u2bd4\0\u01dc\0\u01dc\0\u01dc\0\u2c18\0\u2c5c"+
    "\0\u01dc\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u01dc\0\u3014"+
    "\0\314\0\u3058\0\u309c\0\u30e0\0\u3124\0\u01dc\0\u3168\0\u31ac"+
    "\0\u31f0\0\u01dc\0\u01dc\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344"+
    "\0\u01dc\0\u3388\0\u01dc\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u3520\0\u3564\0\u35a8\0\u01dc\0\u01dc\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u01dc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850"+
    "\0\u01dc\0\u3894\0\u01dc\0\u38d8\0\u01dc\0\u391c\0\u01dc\0\u3960"+
    "\0\u39a4\0\u01dc\0\u39e8\0\u3a2c\0\u01dc\0\u3a70\0\u01dc\0\u3ab4"+
    "\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u01dc\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u3cd4\0\u01dc\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u01dc\0\u3e28"+
    "\0\u3e6c\0\u3eb0\0\u01dc\0\u01dc\0\u01dc\0\u3ef4\0\u01dc\0\u3f38"+
    "\0\u3f7c\0\u3fc0\0\u01dc\0\u4004\0\u4048\0\u408c\0\u01dc\0\u40d0"+
    "\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u01dc"+
    "\0\u42f0\0\u4334\0\u01dc\0\u4378\0\u01dc\0\u43bc\0\u4400\0\u4444"+
    "\0\u4488\0\u01dc\0\u01dc\0\u01dc\0\u44cc\0\u4510\0\u4554\0\u4598"+
    "\0\u45dc\0\u4620\0\u4664\0\u01dc\0\u46a8\0\u46ec\0\u4730\0\u4774"+
    "\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994"+
    "\0\u49d8\0\u4a1c\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70"+
    "\0\u4bb4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\11\1\26\1\27\1\30\3\11\1\31\1\11\1\32"+
    "\1\11\1\33\1\11\1\34\1\11\1\35\1\36\1\11"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\11\1\63\1\64\1\65"+
    "\21\63\1\66\1\63\1\67\55\63\1\70\1\71\1\72"+
    "\22\70\1\4\1\73\55\70\106\0\1\6\105\0\1\74"+
    "\1\75\61\0\1\76\103\0\1\77\22\0\13\11\1\0"+
    "\1\11\4\0\30\11\24\0\1\11\10\0\1\100\1\101"+
    "\1\102\1\103\1\0\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\13\0\1\102\1\111\6\0\1\112\1\103\1\107"+
    "\32\0\1\112\10\0\2\13\1\102\2\0\3\13\1\107"+
    "\1\110\1\111\13\0\1\102\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\1\112\10\0\2\110\3\0\3\110\107\0"+
    "\1\113\43\0\1\114\22\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\115\26\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\116\1\11\1\117\4\11\1\120"+
    "\14\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\121\7\11\1\122\1\123\1\11\1\124\7\11"+
    "\1\125\1\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\126\7\11\1\127\13\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\130\17\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\1\131"+
    "\5\11\1\132\1\133\4\11\1\134\13\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\135\21\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\136\10\11\1\137\7\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\140\7\11\1\141\5\11\1\142"+
    "\11\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\143\7\11\1\144\1\145\5\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\146\1\11"+
    "\1\147\17\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\150\5\11\1\151\1\152\5\11\1\153\12\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\1\154"+
    "\3\11\1\155\11\11\1\156\11\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\157\21\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\14\11\1\160"+
    "\13\11\24\0\1\11\67\0\1\161\103\0\1\162\1\163"+
    "\102\0\1\164\1\0\1\165\101\0\1\166\103\0\1\167"+
    "\6\0\1\170\74\0\1\171\7\0\1\172\73\0\1\173"+
    "\10\0\1\174\72\0\1\175\103\0\1\176\14\0\1\63"+
    "\2\0\21\63\1\0\1\63\1\0\55\63\2\0\1\65"+
    "\101\0\2\177\1\0\5\177\1\200\4\177\2\200\1\201"+
    "\4\177\1\202\1\203\1\204\1\177\1\205\1\177\1\206"+
    "\1\207\4\177\1\210\7\177\1\211\33\177\25\0\1\212"+
    "\60\0\1\72\101\0\2\177\1\0\5\177\1\213\4\177"+
    "\2\213\1\214\4\177\1\215\1\216\1\217\1\177\1\220"+
    "\1\177\1\221\1\222\4\177\1\223\7\177\1\224\33\177"+
    "\1\74\1\5\1\6\101\74\5\75\1\225\76\75\10\0"+
    "\1\100\1\101\1\226\2\0\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\13\0\1\226\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\1\112\10\0\2\101\3\0\3\101\1\107"+
    "\1\110\1\111\14\0\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\10\0\1\227\1\230\2\0\5\230\1\0"+
    "\1\230\4\0\2\230\3\0\1\230\2\0\1\230\6\0"+
    "\1\230\1\0\1\230\32\0\1\230\10\0\1\231\1\101"+
    "\1\226\2\0\3\231\1\107\1\110\1\111\13\0\1\226"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\1\112\10\0"+
    "\1\106\1\101\1\226\2\0\3\106\1\107\1\110\1\111"+
    "\13\0\1\226\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\1\112\10\0\1\232\1\101\1\226\2\0\3\232\1\107"+
    "\1\110\1\111\13\0\1\226\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\1\112\10\0\2\110\3\0\3\110\1\107"+
    "\1\0\1\111\14\0\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\10\0\2\233\3\0\3\233\3\0\1\234"+
    "\54\0\1\234\11\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\235\25\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\236\17\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\237\21\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\240\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\1\241"+
    "\27\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\242\16\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\243\21\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\244\4\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\245"+
    "\12\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\246\12\11\1\247\2\11\1\250\11\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\251\10\11"+
    "\1\252\12\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\253\24\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\254\1\255\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\256"+
    "\16\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\257\27\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\260\27\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\261\16\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\262\25\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\263"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\264\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\26\11\1\265\1\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\266\20\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\267"+
    "\1\270\24\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\271\4\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\272\11\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\21\11\1\273\6\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\274\20\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\275\23\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\276\21\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\277\16\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\300\22\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\301\6\11\1\302\12\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\303\26\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\304\12\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\305\12\11\24\0\1\11\67\0\1\306"+
    "\1\307\102\0\1\310\24\0\1\201\4\0\3\201\74\0"+
    "\1\311\4\0\3\311\74\0\1\312\4\0\3\312\5\0"+
    "\1\313\66\0\1\314\4\0\3\314\5\0\1\313\103\0"+
    "\1\315\103\0\1\316\103\0\1\317\103\0\1\320\103\0"+
    "\1\321\103\0\1\322\103\0\1\323\103\0\1\324\56\0"+
    "\4\75\1\6\1\225\76\75\10\0\1\227\1\230\1\325"+
    "\1\0\5\230\1\0\1\230\4\0\2\230\3\0\1\230"+
    "\1\0\1\325\1\230\6\0\1\230\1\0\1\230\32\0"+
    "\1\230\10\0\2\326\1\325\1\0\5\326\1\0\1\326"+
    "\4\0\2\326\3\0\1\326\1\0\1\325\1\326\6\0"+
    "\1\326\1\0\1\326\32\0\1\326\10\0\1\327\1\101"+
    "\1\226\2\0\3\327\1\107\1\110\1\111\13\0\1\226"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\1\112\10\0"+
    "\1\330\1\101\1\226\2\0\3\330\1\107\1\110\1\111"+
    "\13\0\1\226\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\1\112\10\0\2\233\3\0\3\233\1\107\25\0\1\112"+
    "\1\0\1\107\32\0\1\112\10\0\2\233\3\0\3\233"+
    "\72\0\13\11\1\0\1\11\4\0\3\11\1\331\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\1\332"+
    "\27\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\333\20\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\334\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\335\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\336"+
    "\22\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\337\23\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\340\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\341\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\342"+
    "\16\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\343\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\344\1\11\1\345\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\346"+
    "\25\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\347\11\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\350\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\351\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\352"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\353\25\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\354\23\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\24\11\1\355\3\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\356"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\357\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\360\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\361\20\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\362"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\363\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\364\1\365\20\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\366\26\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\1\367"+
    "\27\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\370\25\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\371\27\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\372\27\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\373\15\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\374"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\25\11\1\375\2\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\376\20\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\17\11\1\377\10\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u0100"+
    "\20\11\24\0\1\11\67\0\1\u0101\41\0\1\313\66\0"+
    "\2\u0102\1\325\1\0\5\u0102\1\0\1\u0102\4\0\2\u0102"+
    "\3\0\1\u0102\1\0\1\325\1\u0102\6\0\1\u0102\1\0"+
    "\1\u0102\32\0\1\u0102\10\0\1\u0103\1\101\1\226\2\0"+
    "\3\u0103\1\107\1\110\1\111\13\0\1\226\1\111\6\0"+
    "\1\112\1\0\1\107\32\0\1\112\10\0\1\u0104\1\101"+
    "\1\226\2\0\3\u0104\1\107\1\110\1\111\13\0\1\226"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\1\112\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u0105\23\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0106"+
    "\15\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0107\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0108\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\u0109\13\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u010a"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u010b\23\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u010c\22\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u010d\25\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\26\11\1\u010e"+
    "\1\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u010f\27\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\u0110\23\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\u0111\13\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0112\12\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u0113\25\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u0114\16\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\25\11\1\u0115\2\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0116\27\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u0117"+
    "\23\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u0118\23\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0119\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\u011a\20\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u011b"+
    "\11\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u011c\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u011d\24\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\u011e\20\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u011f\27\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0120\17\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u0121\27\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0122\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0123\17\11\24\0"+
    "\1\11\10\0\2\u0124\1\325\1\0\5\u0124\1\0\1\u0124"+
    "\4\0\2\u0124\3\0\1\u0124\1\0\1\325\1\u0124\6\0"+
    "\1\u0124\1\0\1\u0124\32\0\1\u0124\10\0\1\u0125\1\101"+
    "\1\226\2\0\3\u0125\1\107\1\110\1\111\13\0\1\226"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\1\112\10\0"+
    "\1\u0126\1\101\1\226\2\0\3\u0126\1\107\1\110\1\111"+
    "\13\0\1\226\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\1\112\6\0\13\11\1\0\1\11\4\0\1\u0127\27\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u0128"+
    "\27\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0129\22\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\u012a\23\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\u012b\13\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u012c"+
    "\12\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u012d\25\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\u012e\10\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u012f\16\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0130"+
    "\16\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\u0131\10\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0132\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0133\16\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\u0134"+
    "\6\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u0135\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\22\11\1\u0136\5\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0137\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u0138"+
    "\20\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\u0139\20\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\24\11\1\u013a\3\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u013b\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u013c"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u013d\22\11\24\0\1\11\10\0\2\u013e\1\325"+
    "\1\0\5\u013e\1\0\1\u013e\4\0\2\u013e\3\0\1\u013e"+
    "\1\0\1\325\1\u013e\6\0\1\u013e\1\0\1\u013e\32\0"+
    "\1\u013e\10\0\1\u013f\1\101\1\226\2\0\3\u013f\1\107"+
    "\1\110\1\111\13\0\1\226\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\1\112\10\0\1\u0140\1\101\1\226\2\0"+
    "\3\u0140\1\107\1\110\1\111\13\0\1\226\1\111\6\0"+
    "\1\112\1\0\1\107\32\0\1\112\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0141\22\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0142\16\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\u0143"+
    "\21\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0144\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\u0145\25\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u0146\11\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u0147"+
    "\25\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0148\22\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u0149\27\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\u014a\17\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u014b\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\13\11"+
    "\1\u014c\14\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u014d\17\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u014e\24\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u014f\17\11"+
    "\24\0\1\11\10\0\2\u0150\1\325\1\0\5\u0150\1\0"+
    "\1\u0150\4\0\2\u0150\3\0\1\u0150\1\0\1\325\1\u0150"+
    "\6\0\1\u0150\1\0\1\u0150\32\0\1\u0150\10\0\1\u0151"+
    "\1\101\1\226\2\0\3\u0151\1\107\1\110\1\111\13\0"+
    "\1\226\1\111\6\0\1\112\1\0\1\107\32\0\1\112"+
    "\10\0\1\u0152\1\101\1\226\2\0\3\u0152\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u0153\24\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u0154\16\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u0155\16\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0156\27\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0157"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0158\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0159\22\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u015a\16\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u015b"+
    "\17\11\24\0\1\11\10\0\2\u015c\1\325\1\0\5\u015c"+
    "\1\0\1\u015c\4\0\2\u015c\3\0\1\u015c\1\0\1\325"+
    "\1\u015c\6\0\1\u015c\1\0\1\u015c\32\0\1\u015c\10\0"+
    "\1\u015d\1\101\1\226\2\0\3\u015d\1\107\1\110\1\111"+
    "\13\0\1\226\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\1\112\10\0\1\u015e\1\101\1\226\2\0\3\u015e\1\107"+
    "\1\110\1\111\13\0\1\226\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\1\112\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u015f\12\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0160\24\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\u0161\6\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\u0162"+
    "\21\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0163\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0164\24\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\17\11\1\u0165\10\11\24\0"+
    "\1\11\10\0\2\u0166\1\325\1\0\5\u0166\1\0\1\u0166"+
    "\4\0\2\u0166\3\0\1\u0166\1\0\1\325\1\u0166\6\0"+
    "\1\u0166\1\0\1\u0166\32\0\1\u0166\10\0\1\u0167\1\101"+
    "\1\226\2\0\3\u0167\1\107\1\110\1\111\13\0\1\226"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\1\112\10\0"+
    "\1\u0168\1\101\1\226\2\0\3\u0168\1\107\1\110\1\111"+
    "\13\0\1\226\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\1\112\6\0\13\11\1\0\1\11\4\0\27\11\1\u0169"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u016a\17\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\21\11\1\u016b\6\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u016c\25\11\24\0\1\11"+
    "\10\0\2\u016d\1\325\1\0\5\u016d\1\0\1\u016d\4\0"+
    "\2\u016d\3\0\1\u016d\1\0\1\325\1\u016d\6\0\1\u016d"+
    "\1\0\1\u016d\32\0\1\u016d\10\0\1\u016e\1\101\1\226"+
    "\2\0\3\u016e\1\107\1\110\1\111\13\0\1\226\1\111"+
    "\6\0\1\112\1\0\1\107\32\0\1\112\10\0\1\u016f"+
    "\1\101\1\226\2\0\3\u016f\1\107\1\110\1\111\13\0"+
    "\1\226\1\111\6\0\1\112\1\0\1\107\32\0\1\112"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0170\17\11"+
    "\24\0\1\11\10\0\2\u0171\1\325\1\0\5\u0171\1\0"+
    "\1\u0171\4\0\2\u0171\3\0\1\u0171\1\0\1\325\1\u0171"+
    "\6\0\1\u0171\1\0\1\u0171\32\0\1\u0171\10\0\1\u0172"+
    "\1\101\1\226\2\0\3\u0172\1\107\1\110\1\111\13\0"+
    "\1\226\1\111\6\0\1\112\1\0\1\107\32\0\1\112"+
    "\10\0\1\u0173\1\101\1\226\2\0\3\u0173\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\6\0\13\11\1\0\1\11\4\0\17\11"+
    "\1\u0174\10\11\24\0\1\11\10\0\2\u0175\1\325\1\0"+
    "\5\u0175\1\0\1\u0175\4\0\2\u0175\3\0\1\u0175\1\0"+
    "\1\325\1\u0175\6\0\1\u0175\1\0\1\u0175\32\0\1\u0175"+
    "\10\0\1\u0176\1\101\1\226\2\0\3\u0176\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\10\0\1\u0177\1\101\1\226\2\0\3\u0177"+
    "\1\107\1\110\1\111\13\0\1\226\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\1\112\10\0\2\u0178\1\325\1\0"+
    "\5\u0178\1\0\1\u0178\4\0\2\u0178\3\0\1\u0178\1\0"+
    "\1\325\1\u0178\6\0\1\u0178\1\0\1\u0178\32\0\1\u0178"+
    "\10\0\1\u0179\1\101\1\226\2\0\3\u0179\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\10\0\1\u017a\1\101\1\226\2\0\3\u017a"+
    "\1\107\1\110\1\111\13\0\1\226\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\1\112\10\0\2\u017b\1\325\1\0"+
    "\5\u017b\1\0\1\u017b\4\0\2\u017b\3\0\1\u017b\1\0"+
    "\1\325\1\u017b\6\0\1\u017b\1\0\1\u017b\32\0\1\u017b"+
    "\10\0\1\u017c\1\101\1\226\2\0\3\u017c\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\10\0\1\u017d\1\101\1\226\2\0\3\u017d"+
    "\1\107\1\110\1\111\13\0\1\226\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\1\112\10\0\2\u017e\1\325\1\0"+
    "\5\u017e\1\0\1\u017e\4\0\2\u017e\3\0\1\u017e\1\0"+
    "\1\325\1\u017e\6\0\1\u017e\1\0\1\u017e\32\0\1\u017e"+
    "\10\0\1\u017f\1\101\1\226\2\0\3\u017f\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\10\0\1\u0180\1\101\1\226\2\0\3\u0180"+
    "\1\107\1\110\1\111\13\0\1\226\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\1\112\10\0\2\u0181\1\325\1\0"+
    "\5\u0181\1\0\1\u0181\4\0\2\u0181\3\0\1\u0181\1\0"+
    "\1\325\1\u0181\6\0\1\u0181\1\0\1\u0181\32\0\1\u0181"+
    "\10\0\1\u0182\1\101\1\226\2\0\3\u0182\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\10\0\1\u0183\1\101\1\226\2\0\3\u0183"+
    "\1\107\1\110\1\111\13\0\1\226\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\1\112\10\0\2\u0184\1\325\1\0"+
    "\5\u0184\1\0\1\u0184\4\0\2\u0184\3\0\1\u0184\1\0"+
    "\1\325\1\u0184\6\0\1\u0184\1\0\1\u0184\32\0\1\u0184"+
    "\10\0\1\u0185\1\101\1\226\2\0\3\u0185\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\12\0\1\325\23\0\1\325\55\0\1\u0186"+
    "\1\101\1\226\2\0\3\u0186\1\107\1\110\1\111\13\0"+
    "\1\226\1\111\6\0\1\112\1\0\1\107\32\0\1\112"+
    "\10\0\1\u0187\1\101\1\226\2\0\3\u0187\1\107\1\110"+
    "\1\111\13\0\1\226\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\1\112\10\0\1\u0188\1\101\1\226\2\0\3\u0188"+
    "\1\107\1\110\1\111\13\0\1\226\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\1\112\10\0\1\u0189\1\101\1\226"+
    "\2\0\3\u0189\1\107\1\110\1\111\13\0\1\226\1\111"+
    "\6\0\1\112\1\0\1\107\32\0\1\112\10\0\2\101"+
    "\1\226\2\0\3\101\1\107\1\110\1\111\13\0\1\226"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\1\112";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\17\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\1\11\2\1\1\0"+
    "\2\11\2\1\1\11\1\0\3\1\1\11\1\1\1\0"+
    "\3\11\44\1\2\11\1\1\1\11\1\1\12\11\2\1"+
    "\11\11\12\1\1\0\1\11\5\1\1\0\51\1\1\11"+
    "\1\1\2\11\1\0\1\11\1\0\11\11\53\1\1\11"+
    "\153\1\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public boolean hasNext() {
      return !zzAtEOF;
  }

  StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalyzer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return symbol(GTEQ);
          }
        case 133: break;
        case 29: 
          { return symbol(XOR);
          }
        case 134: break;
        case 20: 
          { return symbol(GT);
          }
        case 135: break;
        case 126: 
          { return symbol(TRANSIENT);
          }
        case 136: break;
        case 51: 
          { return symbol(NOTEQ);
          }
        case 137: break;
        case 90: 
          { return symbol(BYTE);
          }
        case 138: break;
        case 9: 
          { yybegin(STRING); string.setLength(0);
          }
        case 139: break;
        case 13: 
          { return symbol(LBRACE);
          }
        case 140: break;
        case 19: 
          { return symbol(EQ);
          }
        case 141: break;
        case 42: 
          { return symbol(MINUSMINUS);
          }
        case 142: break;
        case 125: 
          { return symbol(CONTINUE);
          }
        case 143: break;
        case 41: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 144: break;
        case 110: 
          { return symbol(STATIC);
          }
        case 145: break;
        case 45: 
          { return symbol(DO);
          }
        case 146: break;
        case 57: 
          { return symbol(PLUSPLUS);
          }
        case 147: break;
        case 21: 
          { return symbol(LT);
          }
        case 148: break;
        case 119: 
          { return symbol(EXTENDS);
          }
        case 149: break;
        case 112: 
          { return symbol(THROWS);
          }
        case 150: break;
        case 80: 
          { yybegin(YYINITIAL); int val = Integer.parseInt(yytext().substring(1,yylength()-1),8); return symbol(CHARACTER_LITERAL, new Character((char)val));
          }
        case 151: break;
        case 52: 
          { return symbol(ANDEQ);
          }
        case 152: break;
        case 66: 
          { string.append( '\t' );
          }
        case 153: break;
        case 117: 
          { return symbol(PUBLIC);
          }
        case 154: break;
        case 59: 
          { return symbol(MODEQ);
          }
        case 155: break;
        case 124: 
          { return symbol(ABSTRACT);
          }
        case 156: break;
        case 85: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\t'));
          }
        case 157: break;
        case 118: 
          { return symbol(BOOLEAN);
          }
        case 158: break;
        case 129: 
          { return symbol(THREADSAFE);
          }
        case 159: break;
        case 101: 
          { return symbol(SHORT);
          }
        case 160: break;
        case 103: 
          { return symbol(THROW);
          }
        case 161: break;
        case 97: 
          { return symbol(NULL);
          }
        case 162: break;
        case 10: 
          { yybegin(CHARLITERAL);
          }
        case 163: break;
        case 46: 
          { return symbol(EQEQ);
          }
        case 164: break;
        case 131: 
          { return symbol(IMPLEMENTS);
          }
        case 165: break;
        case 40: 
          { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
          }
        case 166: break;
        case 95: 
          { return symbol(LONG);
          }
        case 167: break;
        case 91: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(true));
          }
        case 168: break;
        case 27: 
          { return symbol(OR);
          }
        case 169: break;
        case 28: 
          { return symbol(PLUS);
          }
        case 170: break;
        case 132: 
          { return symbol(SYNCHRONIZED);
          }
        case 171: break;
        case 68: 
          { string.append( '\n' );
          }
        case 172: break;
        case 12: 
          { return symbol(RPAREN);
          }
        case 173: break;
        case 61: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8); string.append( val );
          }
        case 174: break;
        case 87: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\n'));
          }
        case 175: break;
        case 48: 
          { return symbol(RSHIFT);
          }
        case 176: break;
        case 105: 
          { return symbol(CLASS);
          }
        case 177: break;
        case 92: 
          { return symbol(THIS);
          }
        case 178: break;
        case 36: 
          { return symbol(MULTEQ);
          }
        case 179: break;
        case 123: 
          { return symbol(PRIVATE);
          }
        case 180: break;
        case 78: 
          { return symbol(URSHIFT);
          }
        case 181: break;
        case 121: 
          { return symbol(FINALLY);
          }
        case 182: break;
        case 99: 
          { return symbol(URSHIFTEQ);
          }
        case 183: break;
        case 72: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
          }
        case 184: break;
        case 76: 
          { return symbol(FOR);
          }
        case 185: break;
        case 89: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
          }
        case 186: break;
        case 38: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 187: break;
        case 74: 
          { return symbol(NEW);
          }
        case 188: break;
        case 35: 
          { return symbol(DIVEQ);
          }
        case 189: break;
        case 114: 
          { return symbol(NATIVE);
          }
        case 190: break;
        case 120: 
          { return symbol(DEFAULT);
          }
        case 191: break;
        case 24: 
          { return symbol(QUESTION);
          }
        case 192: break;
        case 3: 
          { return symbol(DIV);
          }
        case 193: break;
        case 116: 
          { return symbol(DOUBLE);
          }
        case 194: break;
        case 94: 
          { return symbol(CHAR);
          }
        case 195: break;
        case 44: 
          { return symbol(IF);
          }
        case 196: break;
        case 5: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 197: break;
        case 60: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 198: break;
        case 122: 
          { return symbol(PACKAGE);
          }
        case 199: break;
        case 58: 
          { return symbol(XOREQ);
          }
        case 200: break;
        case 111: 
          { return symbol(SWITCH);
          }
        case 201: break;
        case 79: 
          { return symbol(LSHIFTEQ);
          }
        case 202: break;
        case 30: 
          { return symbol(MOD);
          }
        case 203: break;
        case 11: 
          { return symbol(LPAREN);
          }
        case 204: break;
        case 67: 
          { string.append( '\r' );
          }
        case 205: break;
        case 50: 
          { return symbol(LSHIFT);
          }
        case 206: break;
        case 100: 
          { return symbol(BREAK);
          }
        case 207: break;
        case 23: 
          { return symbol(COMP);
          }
        case 208: break;
        case 65: 
          { string.append( '\b' );
          }
        case 209: break;
        case 86: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\r'));
          }
        case 210: break;
        case 43: 
          { return symbol(MINUSEQ);
          }
        case 211: break;
        case 84: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\b'));
          }
        case 212: break;
        case 39: 
          { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 213: break;
        case 32: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 214: break;
        case 73: 
          { return symbol(TRY);
          }
        case 215: break;
        case 62: 
          { string.append( '\"' );
          }
        case 216: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 217: break;
        case 54: 
          { return symbol(OREQ);
          }
        case 218: break;
        case 130: 
          { return symbol(INSTANCEOF);
          }
        case 219: break;
        case 37: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
          }
        case 220: break;
        case 16: 
          { return symbol(RBRACK);
          }
        case 221: break;
        case 17: 
          { return symbol(SEMICOLON);
          }
        case 222: break;
        case 6: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 223: break;
        case 108: 
          { return symbol(FINAL);
          }
        case 224: break;
        case 81: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\"'));
          }
        case 225: break;
        case 115: 
          { return symbol(IMPORT);
          }
        case 226: break;
        case 63: 
          { string.append( '\'' );
          }
        case 227: break;
        case 107: 
          { return symbol(FLOAT);
          }
        case 228: break;
        case 102: 
          { return symbol(SUPER);
          }
        case 229: break;
        case 64: 
          { string.append( '\\' );
          }
        case 230: break;
        case 93: 
          { return symbol(CASE);
          }
        case 231: break;
        case 8: 
          { return symbol(MINUS);
          }
        case 232: break;
        case 82: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\''));
          }
        case 233: break;
        case 7: 
          { return symbol(DOT);
          }
        case 234: break;
        case 83: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\\'));
          }
        case 235: break;
        case 77: 
          { return symbol(RSHIFTEQ);
          }
        case 236: break;
        case 75: 
          { return symbol(INT);
          }
        case 237: break;
        case 128: 
          { return symbol(PROTECTED);
          }
        case 238: break;
        case 26: 
          { return symbol(AND);
          }
        case 239: break;
        case 25: 
          { return symbol(COLON);
          }
        case 240: break;
        case 49: 
          { return symbol(LTEQ);
          }
        case 241: break;
        case 69: 
          { string.append( '\f' );
          }
        case 242: break;
        case 98: 
          { return symbol(VOID);
          }
        case 243: break;
        case 22: 
          { return symbol(NOT);
          }
        case 244: break;
        case 33: 
          { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
          }
        case 245: break;
        case 14: 
          { return symbol(RBRACE);
          }
        case 246: break;
        case 88: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\f'));
          }
        case 247: break;
        case 71: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
          }
        case 248: break;
        case 4: 
          { return symbol(MULT);
          }
        case 249: break;
        case 15: 
          { return symbol(LBRACK);
          }
        case 250: break;
        case 55: 
          { return symbol(OROR);
          }
        case 251: break;
        case 31: 
          { string.append( yytext() );
          }
        case 252: break;
        case 127: 
          { return symbol(INTERFACE);
          }
        case 253: break;
        case 106: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(false));
          }
        case 254: break;
        case 53: 
          { return symbol(ANDAND);
          }
        case 255: break;
        case 109: 
          { return symbol(WHILE);
          }
        case 256: break;
        case 34: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 257: break;
        case 56: 
          { return symbol(PLUSEQ);
          }
        case 258: break;
        case 96: 
          { return symbol(ELSE);
          }
        case 259: break;
        case 70: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(yytext().charAt(0)));
          }
        case 260: break;
        case 104: 
          { return symbol(CATCH);
          }
        case 261: break;
        case 18: 
          { return symbol(COMMA);
          }
        case 262: break;
        case 113: 
          { return symbol(RETURN);
          }
        case 263: break;
        case 2: 
          { 
          }
        case 264: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicalAnalyzer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        LexicalAnalyzer scanner = null;
        try {
          scanner = new LexicalAnalyzer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
